package indi.a9043.gree_scanning.swing;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import indi.a9043.gree_scanning.pojo.GreeUser;
import indi.a9043.gree_scanning.service.LoginService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.concurrent.ExecutionException;

@Component
public class Setting {
    private JPanel panel;
    private JDialog jDialog;
    private JPasswordField textField1;
    private JButton submitButton;
    private JPasswordField textField2;
    private JPasswordField textField3;
    private GreeUser greeUser;

    @Autowired
    public Setting(final LoginService loginService) {
        submitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (String.valueOf(textField1.getPassword()).equals(String.valueOf(textField2.getPassword()))) {
                    JOptionPane.showMessageDialog(panel, "新旧密码不能一样", "Warn", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                if (String.valueOf(textField2.getPassword()).length() < 6) {
                    JOptionPane.showMessageDialog(panel, "密码长度需大于等于6位", "Warn", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                if (String.valueOf(textField2.getPassword()).length() > 18) {
                    JOptionPane.showMessageDialog(panel, "密码长度不能长于18位", "Warn", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                if (!String.valueOf(textField2.getPassword()).equals(String.valueOf(textField3.getPassword()))) {
                    JOptionPane.showMessageDialog(panel, "确认新密码不一致", "Warn", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                final InfiniteProgressPanel infiniteProgressPanel = new InfiniteProgressPanel();
                Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
                infiniteProgressPanel.setBounds(100, 100, (dimension.width) / 2, (dimension.height) / 2);
                if (panel.getRootPane() != null) {
                    panel.getRootPane().setGlassPane(infiniteProgressPanel);
                    panel.getRootPane().validate();
                    panel.getRootPane().setVisible(true);
                    infiniteProgressPanel.start();
                }
                SwingWorker<Boolean, Object> swingWorker = new SwingWorker<Boolean, Object>() {
                    @Override
                    protected Boolean doInBackground() throws Exception {
                        return loginService.changePassword(greeUser, String.valueOf(textField1.getPassword()), String.valueOf(textField2.getPassword()));
                    }

                    @Override
                    protected void done() {
                        infiniteProgressPanel.stop();
                        try {
                            Boolean res = get();
                            if (res != null && res) {
                                JOptionPane.showMessageDialog(panel, "修改成功", "Success", JOptionPane.PLAIN_MESSAGE);
                                jDialog.setVisible(false);
                                jDialog.dispose();
                                textField1.setText("");
                                textField2.setText("");
                                textField3.setText("");
                                return;
                            }
                        } catch (InterruptedException | ExecutionException e1) {
                            e1.printStackTrace();
                        }
                        JOptionPane.showMessageDialog(panel, "修改失败", "Error", JOptionPane.ERROR_MESSAGE);
                        textField1.setText("");
                        textField2.setText("");
                        textField3.setText("");
                    }
                };
                swingWorker.execute();
            }
        });
    }

    public JPanel getPanel(GreeUser greeUser, JDialog jDialog) {
        this.greeUser = greeUser;
        this.jDialog = jDialog;
        return panel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(10, 2, new Insets(20, 20, 20, 20), 20, 20));
        textField3 = new JPasswordField();
        panel.add(textField3, new GridConstraints(6, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        submitButton = new JButton();
        submitButton.setText("提交");
        panel.add(submitButton, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(69, 30), null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel.add(spacer2, new GridConstraints(9, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        panel.add(spacer3, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        panel.add(spacer4, new GridConstraints(8, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("旧密码");
        panel.add(label1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("新密码");
        panel.add(label2, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("确认新密码");
        panel.add(label3, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textField1 = new JPasswordField();
        panel.add(textField1, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        textField2 = new JPasswordField();
        panel.add(textField2, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}
